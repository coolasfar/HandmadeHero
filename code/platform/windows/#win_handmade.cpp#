/*=========================================================

created date: 2022/04/16

===========================================================*/
#include <windows.h>

#include <dsound.h>
#include <math.h>
#include <cwchar>
#include <intrin.h>
#include <iostream>
#include <stdio.h>
#include <vector>
#include <Xinput.h>

#include "win_handmade.h"
#include "../../handmade.cpp"




#define MessageBox MessageBoxW

//===========================================================

/* TODO
	- save game locations
	- getting a handle to our own executable file
	- asset loading path
	- threading
	- raw input
	- sleep/timeBeginPeriod
	- clipCursor
	- fullscreen support
	- WM_SETCURSOR
	- QueryCancelAutoplay
	- WM_ACTIVATEAPP
	- Blit speed improvement
	- hardware acceleration(OpenGL or Direct3D)
	- GetKeyboardLayout
*/

#define internal			static
#define local_persist		static
#define global_variable		static

#define PI32				3.141592653F


global_variable bool				GlobalRunning;
global_variable	offscreen_buffer	GlobalBackBuffer;
global_variable LPDIRECTSOUNDBUFFER	GlobalSecondaryBuffer;
global_variable int64				GlobalPerfCountFrequency;

debug_read_file_result DebugPlatformReadEntireFile(const char* filename)
{
	debug_read_file_result result = {};

	HANDLE fileHandle = CreateFileA(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0,0);

	if(fileHandle != INVALID_HANDLE_VALUE)
	{
		LARGE_INTEGER fileSize;
		if (GetFileSizeEx(fileHandle, &fileSize))
		{
			uint32 fileSize32 = SafeTruncateUint64(fileSize.QuadPart);
			result.contents = VirtualAlloc(0,fileSize.QuadPart, MEM_COMMIT | MEM_RESERVE,PAGE_READWRITE);
			if (result.contents)
			{
				DWORD byteRead;
				if (ReadFile(fileHandle,result.contents,fileSize32, &byteRead,0)&&
					(fileSize32 == byteRead))
				{
					result.contentSize = fileSize32;
				}
				else
				{
					DebugPlatformFreeFileMemory(result.contents);
					result.contents = 0;
				}
			}
			else
			{

			}
		}
		else
		{

		}

		CloseHandle(fileHandle);
	}
	else
	{

	}

	return result;
}

void DebugPlatformFreeFileMemory(void* memory)
{
	if (memory)
	{
		VirtualFree(memory, 0, MEM_RELEASE);
	}
}

bool DebugPlatformWriteEntireFile(const char* filename, 
	void* memory,uint32 memorySize)
{
	bool result = false;
	HANDLE fileHandle = CreateFileA(filename, 
		GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0);

	if (fileHandle != INVALID_HANDLE_VALUE)
	{
		DWORD byteWritten;
		if (WriteFile(fileHandle, memory, memorySize, &byteWritten, 0))
		{
			result = (byteWritten == memorySize);
		}
		else
		{

		}

		CloseHandle(fileHandle);
	}
	else
	{

	}

	return result;

}


window_dimension GetWindowDimension(HWND window)
{
	window_dimension result;
	RECT clientRect;
	GetClientRect(window, &clientRect);
	result.Width = clie00ntRect.right - clientRect.left;
	result.Height = clientRect.bottom - clientRect.top;

	return result;
}

#define DIRECT_SOUND_CREATE(name) HRESULT WINAPI name(LPCGUID pcGuidDevice, LPDIRECTSOUND* ppDS, LPUNKNOWN pUnkOuter)
typedef DIRECT_SOUND_CREATE(direct_sound_create);


static void InitDSound(HWND Window, int32 SamplePerSecond, int32 BufferSize)
{
	// load the library
	HMODULE DSoundLibrary = LoadLibraryA("dsound.dll");

	if (DSoundLibrary)
	{
		// get a directsound object
		direct_sound_create* DirectSoundCreate = (direct_sound_create*)GetProcAddress(DSoundLibrary, "DirectSoundCreate");

		LPDIRECTSOUND DirectSound;

		if (DirectSoundCreate && SUCCEEDED(DirectSoundCreate(0, &DirectSound, 0)))
		{
			WAVEFORMATEX WaveFormat;
			WaveFormat.wFormatTag = WAVE_FORMAT_PCM;
			WaveFormat.nChannels = 2;
			WaveFormat.nSamplesPerSec = SamplePerSecond;
			WaveFormat.wBitsPerSample = 16;
			WaveFormat.nBlockAlign = WaveFormat.nChannels * WaveFormat.wBitsPerSample / 8;
			WaveFormat.nAvgBytesPerSec = WaveFormat.nSamplesPerSec * WaveFormat.nBlockAlign;
			WaveFormat.cbSize = 0;

			if (SUCCEEDED(DirectSound->SetCooperativeLevel(Window, DSSCL_PRIORITY)))
			{
				DSBUFFERDESC BufferDescription = {};
				BufferDescription.dwSize = sizeof(BufferDescription);
				BufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

				// create primary buffer
				LPDIRECTSOUNDBUFFER PrimaryBuffer;
				if (SUCCEEDED(DirectSound->CreateSoundBuffer(&BufferDescription, &PrimaryBuffer, 0)))
				{
					if (SUCCEEDED(PrimaryBuffer->SetFormat(&WaveFormat)))
					{
						OutputDebugString(L"Primary buffer format was set\n");
					}
					else
					{
						//TODO: Diagnostic
					}
				}
				else
				{
					//TODO: Diagnostic
				}
			}
			else
			{
				//TODO: Diagnostic
			}

			// create a secondary buffer

			DSBUFFERDESC BufferDescription = {};
			BufferDescription.dwSize = sizeof(BufferDescription);
			BufferDescription.dwFlags = 0;
			BufferDescription.dwBufferBytes = BufferSize;
			BufferDescription.lpwfxFormat = &WaveFormat;
			HRESULT error = DirectSound->CreateSoundBuffer(&BufferDescription, &GlobalSecondaryBuffer, 0);
			if (SUCCEEDED(error))
			{
				if (SUCCEEDED(GlobalSecondaryBuffer->SetFormat(&WaveFormat)))
				{
					OutputDebugString(L"secondary buffer format was set\n");
				}
				else
				{
					//TODO: Diagnostic
				}
			}
		}
		else
		{
			//TODO: Diagnostic
		}

	}
	else
	{
		//TODO: Diagnostic
	}
}

static void ResizeDIBSection(offscreen_buffer* Buffer, int width, int height)
{

	if (Buffer->Memory)
	{
		VirtualFree(Buffer->Memory, 0, MEM_RELEASE);
	}

	Buffer->Width = width;
	Buffer->Height = height;
	Buffer->BytePerPixel = 4;

	// biHeight is negative, this is windows to treat this bitmap as top-down
	// not bottom_up, meanning that the first three bytes are  the color for the
	// top-left pixel in the bitmap, but not the bottom left.
	Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);
	Buffer->Info.bmiHeader.biWidth = Buffer->Width;
	Buffer->Info.bmiHeader.biHeight = -Buffer->Height;
	Buffer->Info.bmiHeader.biPlanes = 1;
	Buffer->Info.bmiHeader.biBitCount = 32;
	Buffer->Info.bmiHeader.biCompression = BI_RGB;

	int BitmapMemorySize = (Buffer->Width * Buffer->Height) * Buffer->BytePerPixel;
	Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	Buffer->Pitch = width * Buffer->BytePerPixel;

}

static void UpdateWindow(HDC DeviceContext, int windowWidth, int windowHeight, offscreen_buffer* Buffer, int x, int y, int width, int height)
{
	StretchDIBits(DeviceContext,
		0, 0, windowWidth, windowHeight,
		0, 0, Buffer->Width, Buffer->Height,
		Buffer->Memory,
		&Buffer->Info,
		DIB_RGB_COLORS,
		SRCCOPY
	);
}

internal void ProcessKeyboardMessage(game_button_state* newState, bool isDown)
{
	//Assert(newState->EndedDown != isDown);
	newState->EndedDown = isDown;
	++newState->HalfTransitionCount;
}

internal void ProcessPendingMessage(game_controller_input* keyboardController)
{
	MSG Message;
	while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE))
	{
		switch (Message.message)
		{
		case WM_QUIT:
		{
			GlobalRunning = false;
		}break;

		case WM_SYSKEYDOWN:
		case WM_SYSKEYUP:
		case WM_KEYDOWN:
		case WM_KEYUP:
		{
			uint32 vkCode = (uint32)Message.wParam;
			BOOL wasDown = ((Message.lParam & (1 << 30)) != 0);
			BOOL isDown = ((Message.lParam & (1 << 31)) == 0);

			if (wasDown != isDown)
			{
				if (vkCode == 'W')
				{
					ProcessKeyboardMessage(&keyboardController->moveUp, isDown);
					OutputDebugString(L"W");
				}
				else if (vkCode == 'A')
				{
					ProcessKeyboardMessage(&keyboardController->moveLeft, isDown);
					OutputDebugString(L"A");
				}
				else if (vkCode == 'S')
				{
					ProcessKeyboardMessage(&keyboardController->moveDown, isDown);
				}
				else if (vkCode == 'D')
				{
					ProcessKeyboardMessage(&keyboardController->moveRight, isDown);
				}
				else if (vkCode == VK_ESCAPE)
				{
					GlobalRunning = false;

				}
				else if (vkCode == VK_UP)
				{
					ProcessKeyboardMessage(&keyboardController->actionUp, isDown);
					OutputDebugString(L"Up");
				}
				else if (vkCode == VK_DOWN)
				{
					ProcessKeyboardMessage(&keyboardController->actionDown, isDown);
					OutputDebugString(L"Down");
				}
				else if (vkCode == VK_LEFT)
				{
					ProcessKeyboardMessage(&keyboardController->actionLeft, isDown);
					OutputDebugString(L"Left");
				}
				else if (vkCode == VK_RIGHT)
				{
					ProcessKeyboardMessage(&keyboardController->actionRight, isDown);
					OutputDebugString(L"Right");
				}

			}
			bool wasAltDown = (Message.lParam & (1 << 29));
			if (wasAltDown && (vkCode == VK_F4))
			{
				GlobalRunning = false;
			}
		}break;

		default:
		{
			TranslateMessage(&Message);
			DispatchMessage(&Message);
		}break;
		}
	}

}

LRESULT CALLBACK MainWindowCallback(HWND hwnd,
	UINT uMsg,
	WPARAM wParam,
	LPARAM lParam)
{
	LRESULT Result = 0;

	HDC DeviceContext = GetDC(hwnd);
	switch (uMsg)
	{
	case WM_CLOSE:
	{
		GlobalRunning = false;
	} break;

	case WM_SIZE:
	{
		window_dimension dimension = GetWindowDimension(hwnd);
		ResizeDIBSection(&GlobalBackBuffer, dimension.Width, dimension.Height);

	} break;

	case WM_DESTROY:
	{
		GlobalRunning = false;
	} break;

	// system keystrokes
	case WM_SYSKEYDOWN:
	case WM_SYSKEYUP:

		// non-system keystrokes
	case WM_KEYDOWN:
	case WM_KEYUP:
	{
		Assert(!"keyboard inpuit come in troung non-dispatch message");
	}break;

	case WM_PAINT:
	{
		PAINTSTRUCT Paint;
		HDC DeviceContext = BeginPaint(hwnd, &Paint);

		int X = Paint.rcPaint.left;
		int Y = Paint.rcPaint.top;
		int Width = Paint.rcPaint.right - Paint.rcPaint.left;
		int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

		RECT clientRect;
		GetClientRect(hwnd, &clientRect);

		window_dimension dimension = GetWindowDimension(hwnd);
		UpdateWindow(DeviceContext, dimension.Width, 
			dimension.Height, &GlobalBackBuffer, 
			X, Y, dimension.Width, dimension.Height);

		EndPaint(hwnd, &Paint);
	}	break;

	default:
	{
		Result = DefWindowProc(hwnd, uMsg, wParam, lParam);
	} break;

	}

	return Result;
}



internal void ClearSoundBuffer(sound_output* soundOutput)
{
	VOID* Region1;
	DWORD	Region1Size;
	VOID* Region2;
	DWORD	Region2Size;


	if (SUCCEEDED(
		GlobalSecondaryBuffer->Lock(0,
			soundOutput->SecondaryBufferSize,
			&Region1,
			&Region1Size,
			&Region2,
			&Region2Size,
			0
		)))
	{

		uint8* DestSample = (uint8*)Region1;

		for (DWORD ByteIndex = 0; ByteIndex < Region1Size; ++ByteIndex)
		{
			*DestSample++ = 0;
		}

		DestSample = (uint8*)Region2;
		for (DWORD ByteIndex = 0; ByteIndex < Region2Size; ++ByteIndex)
		{
			*DestSample++ = 0;
		}

		GlobalSecondaryBuffer->Unlock(
			Region1,
			Region1Size,
			Region2,
			Region2Size);
	}
}

internal void FillSoundBuffer(sound_output* soundOutput, 
	DWORD ByteToLock, DWORD ByteToWrite, game_sound_buffer* sound_buffer)
{
	VOID* Region1;
	DWORD	Region1Size;
	VOID* Region2;
	DWORD	Region2Size;

	GlobalSecondaryBuffer->Lock(
		ByteToLock,
		ByteToWrite,
		&Region1,
		&Region1Size,
		&Region2,
		&Region2Size,
		0
	);

	int16* DestSample = (int16*)Region1;
	int16* SourceSample = sound_buffer->Samples;
	DWORD	Region1SampleCount = Region1Size / soundOutput->BytesPerSample;
	DWORD	Region2SampleCount = Region2Size / soundOutput->BytesPerSample;
	for (DWORD SampleIndex = 0; SampleIndex < Region1SampleCount; ++SampleIndex)
	{
		*DestSample++ = *SourceSample++;
		*DestSample++ = *SourceSample++;
		++(soundOutput->RunningSampleIndex);
	}

	DestSample = (int16*)Region2;
	for (DWORD SampleIndex = 0; SampleIndex < Region2SampleCount; ++SampleIndex)
	{
		*DestSample++ = *SourceSample++;
		*DestSample++ = *SourceSample++;
		++(soundOutput->RunningSampleIndex);
	}


	GlobalSecondaryBuffer->Unlock(
		Region1,
		Region1Size,
		Region2,
		Region2Size);
}

internal void ProcessXInputDigitalButton(DWORD XInputButtonState, 
	game_button_state* oldState, game_button_state* newState, DWORD buttonBit)
{
	newState->EndedDown = (XInputButtonState & buttonBit) == buttonBit;

	newState->HalfTransitionCount = 
		(oldState->EndedDown != newState->EndedDown) ? 1 : 0;
}



inline LARGE_INTEGER GetWallClock()
{
	LARGE_INTEGER result;
	QueryPerformanceCounter(&result);
	return result;
}

inline real32 GetSecondsElapsed(LARGE_INTEGER start, LARGE_INTEGER end)
{
	real32 result = (real32)(end.QuadPart -
		start.QuadPart) /
		(real32)GlobalPerfCountFrequency;

	return result;

}

int WINAPI WinMain(
	HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPSTR lpCmdLine,
	int nShowCmd)
{
	LARGE_INTEGER PerfFrequency;
 	QueryPerformanceFrequency(&PerfFrequency);
	GlobalPerfCountFrequency = PerfFrequency.QuadPart;

	// set windows scheduler granularity to 1ms
	// so that sleep() can be more granular
 	UINT desiredScheduleMs = 1;
	bool sleepIsGranular = (timeBeginPeriod(desiredScheduleMs) == TIMERR_NOERROR);

	WNDCLASS windowClass = {};								
	ResizeDIBSection(&GlobalBackBuffer, 1280, 720);

	windowClass.style = CS_VREDRAW | CS_HREDRAW;
	windowClass.lpfnWndProc = MainWindowCallback;
	windowClass.hInstance = hInstance;

	windowClass.lpszClassName = L"HandmadeHero";

	int monitorRefreshHz = 60;
	int gameUpdateHz = monitorRefreshHz / 2;
	real32 targetSecondsPerFrame = 1.0f / (real32)gameUpdateHz;
	 
	if (RegisterClass(&windowClass))
	{
		HWND WindowHanlde =
			CreateWindowEx(
				0,
				windowClass.lpszClassName,
				L"handmade hero",
				WS_OVERLAPPEDWINDOW | WS_VISIBLE,
				CW_USEDEFAULT,
				CW_USEDEFAULT,
				CW_USEDEFAULT,
				CW_USEDEFAULT,
				0,
				0,
				hInstance,
				0
			);
		if (WindowHanlde)
		{
			GlobalRunning = true;
			HDC DeviceContext = GetDC(WindowHanlde);

			sound_output soundOutput = {};

			soundOutput.SamplePerSecond = 48000;
			soundOutput.BytesPerSample = sizeof(int16) * 2;
			soundOutput.SecondaryBufferSize = soundOutput.SamplePerSecond * soundOutput.BytesPerSample;

			InitDSound(WindowHanlde, soundOutput.SamplePerSecond, soundOutput.SecondaryBufferSize);
			ClearSoundBuffer(&soundOutput);

			GlobalSecondaryBuffer->Play(0, 0, DSBPLAY_LOOPING);

			int16* Samples = (int16*)VirtualAlloc(0, soundOutput.SecondaryBufferSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
			
			LPVOID baseAddress = 0;

			game_memory gameMemory = {};
			gameMemory.permanentStorageSize = MEGABYTES(64);
			gameMemory.transientStorageSize = GIGABYTES((uint64)4);

			uint64 totalSize = gameMemory.permanentStorageSize + gameMemory.transientStorageSize;

			gameMemory.permanentStorage = VirtualAlloc(baseAddress, totalSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
			
			gameMemory.transientStorage = ((uint8*)gameMemory.permanentStorage + gameMemory.permanentStorageSize);

			if (Samples && gameMemory.permanentStorage && gameMemory.transientStorage)
			{
				LARGE_INTEGER LastCounter = GetWallClock();

				int64 LastCycleCount = __rdtsc();

				game_input input[2] = {};
				game_input* newInput = &input[0];
				game_input* oldInput = &input[1];

				while (GlobalRunning)
				{
					game_controller_input* oldKeyboardController = 
						&oldInput->Controllers[0];

					game_controller_input* newKeyboardController = 
						&newInput->Controllers[0];
					game_controller_input zeroController = {};
					*newKeyboardController = zeroController;
					newKeyboardController->isConnected = true;

					for (int buttonIndex = 0;
						buttonIndex < ArrayCount(newKeyboardController->Buttons);
						++buttonIndex)
					{
						newKeyboardController->Buttons[buttonIndex].EndedDown =
							oldKeyboardController->Buttons[buttonIndex].EndedDown;
					}

					ProcessPendingMessage(newKeyboardController);
				
					int MaxControllerCount = XUSER_MAX_COUNT;
					if (MaxControllerCount > ArrayCount(newInput->Controllers))
					{
						MaxControllerCount = ArrayCount(newInput->Controllers);
					}

					for (DWORD controllerIndex = 0;
						controllerIndex < MaxControllerCount;
						++controllerIndex)
					{
						game_controller_input* oldController = &oldInput->Controllers[controllerIndex];
						game_controller_input* newController = &newInput->Controllers[controllerIndex];

						XINPUT_STATE controllerState;
						if (XInputGetState(controllerIndex, &controllerState) ==
							ERROR_SUCCESS)
						{
							XINPUT_GAMEPAD* pad = &controllerState.Gamepad;

							newController->isConnected = true;
							newController->IsAnalog = true;
							
							bool up = (pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);
							bool down = (pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);
							bool left = (pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);
							bool right = (pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

			/*				ProcessXInputDigitalButton(pad->wButtons, &oldController->Down, &newController->Down, XINPUT_GAMEPAD_A);
							ProcessXInputDigitalButton(pad->wButtons, &oldController->Right, &newController->Right, XINPUT_GAMEPAD_B);
							ProcessXInputDigitalButton(pad->wButtons, &oldController->Left, &newController->Left, XINPUT_GAMEPAD_X);
							ProcessXInputDigitalButton(pad->wButtons, &oldController->Up, &newController->Up, XINPUT_GAMEPAD_Y);*/

							
							// left shoulder,right shoulder,A B X Y...
						}
						else
						{
							newController->isConnected = false;
						}
					}

					DWORD ByteToLock;
					DWORD ByteToWrite;
					//	DWORD TargetCursor;
					DWORD PlayCursor;
					DWORD WriteCursor;
					bool SoundIsValid = false;
					if (SUCCEEDED(GlobalSecondaryBuffer->GetCurrentPosition(&PlayCursor, &WriteCursor)))
					{
						ByteToLock = (soundOutput.RunningSampleIndex * soundOutput.BytesPerSample) % soundOutput.SecondaryBufferSize;

						if (ByteToLock == PlayCursor)
						{
							ByteToWrite = 0;
						}
						else if (ByteToLock > PlayCursor)
						{
							ByteToWrite = (soundOutput.SecondaryBufferSize - ByteToLock);
							ByteToWrite += PlayCursor;
						}
						else
						{
							ByteToWrite = PlayCursor - ByteToLock;
						}

						SoundIsValid = true;
					}

					game_offscreen_buffer buffer = {};
					buffer.Memory = GlobalBackBuffer.Memory;
					buffer.Width = GlobalBackBuffer.Width;
					buffer.Height = GlobalBackBuffer.Height;
					buffer.Pitch = GlobalBackBuffer.Pitch;


					game_sound_buffer sound_buffer = {};
					sound_buffer.SamplePerSecond = soundOutput.SamplePerSecond;

					sound_buffer.SampleCount = ByteToWrite / soundOutput.BytesPerSample;
					sound_buffer.Samples = Samples;

					GameUpdateAndRender(&gameMemory, newInput, &buffer, &sound_buffer);

					if (SoundIsValid)
					{
						FillSoundBuffer(&soundOutput, ByteToLock, ByteToWrite, &sound_buffer);
					}

					LARGE_INTEGER workCounter = GetWallClock();
					
					real32 secondsElapsedForWork = GetSecondsElapsed(LastCounter,
						workCounter);
					
					real32 secondsElapsedForFrame = secondsElapsedForWork;

					if (secondsElapsedForFrame < targetSecondsPerFrame)
					{
						while (secondsElapsedForFrame < targetSecondsPerFrame)
						{
							if (sleepIsGranular)
							{
								DWORD sleepMs = 1000.0f * (targetSecondsPerFrame -
									secondsElapsedForFrame);
								Sleep(sleepMs);
							}
							secondsElapsedForFrame = GetSecondsElapsed(LastCounter,
								GetWallClock());
						}
					}
					else
					{
						// TODO: missed frame
					}


					window_dimension dimension = GetWindowDimension(WindowHanlde);
					UpdateWindow(DeviceContext, dimension.Width, dimension.Height,
						&GlobalBackBuffer, 0, 0, dimension.Width, dimension.Height);

					game_input* Temp = newInput;
					newInput = oldInput;
					oldInput = Temp;

					LARGE_INTEGER endCounter = GetWallClock();

					real32 MsPerFrame = 1000.0f * GetSecondsElapsed(LastCounter,
						endCounter);
					LastCounter = endCounter;

					int64 EndCycleCount = __rdtsc();
					int64 CyclesElapsed = EndCycleCount - LastCycleCount;
					LastCycleCount = EndCycleCount;

					real32 FPS = 1000.0f / MsPerFrame;
					ReleaseDC(WindowHanlde, DeviceContext);
#if 1
					char output_buffer[256];

					sprintf_s(output_buffer,sizeof(output_buffer),
						"Milliseconds/frame: %.2f ms, FPS: %f , Mcycle/frame: %d\n", MsPerFrame, FPS, CyclesElapsed / (1000 * 1000));

					OutputDebugStringA(output_buffer);
#endif


				}
			}
			else
			{

			}

		}
		else
		{
			// TODO
		}
	}
	else
	{
		//TODO
	}

	return 0;
}



